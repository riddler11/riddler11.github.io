<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://riddler11.github.io</id>
    <title>Leo&apos;s Blog</title>
    <updated>2021-10-14T13:47:07.287Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://riddler11.github.io"/>
    <link rel="self" href="https://riddler11.github.io/atom.xml"/>
    <subtitle>It&apos;s what you do in the dark, that puts you in the light.</subtitle>
    <logo>https://riddler11.github.io/images/avatar.png</logo>
    <icon>https://riddler11.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Leo&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Wireless transmission of RFID identification information to server based on ESP8266.（基于ESP8266无线传输射频识别信息传输到服务器）]]></title>
        <id>https://riddler11.github.io/post/wireless-transmission-of-rfid-identification-information-to-server-based-on-esp8266ji-yu-esp8266-wu-xian-chuan-shu-she-pin-shi-bie-shi-bie-xin-xi-dao-fu-wu-qi/</id>
        <link href="https://riddler11.github.io/post/wireless-transmission-of-rfid-identification-information-to-server-based-on-esp8266ji-yu-esp8266-wu-xian-chuan-shu-she-pin-shi-bie-shi-bie-xin-xi-dao-fu-wu-qi/">
        </link>
        <updated>2021-10-13T12:26:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="this-is-project-i-did-a-long-time-ago-because-of-this-project-i-learn-a-lot-of-things-not-only-academically-but-also-the-attitude-of-dealing-with-people">This is project I did a long time ago. Because of this project, I learn a lot of things. (Not only academically, but also the attitude of dealing with people.)</h3>
<p>First, look back the board I designed in the past.</p>
<figure data-type="image" tabindex="1"><img src="https://riddler11.github.io/post-images/1634129991464.png" alt="the board" loading="lazy"></figure>
<p>As we all know practice makes prefect. This is the design when I just learned how to use AD software. Integrated by three modules. Arduino uno, ESP8266 and PN532.</p>
<h3 id="i-use-esp8266-to-wirelessly-transmit-the-information-received-by-pn532">I use ESP8266 to wirelessly transmit the information received by PN532.</h3>
<h2 id="about-esp8266">About ESP8266</h2>
<p>It has three modes</p>
<ol>
<li>STA  (station)</li>
<li>AP    (Access Point)</li>
<li>STA、AP Both</li>
</ol>
<p>The technical part adopts STA mode in this project. Arduino sends AT instruction to initialize the module.<br>
<img src="https://riddler11.github.io/post-images/1634181047220.jpg" alt="ESP8266" loading="lazy"><br>
But how to <strong>connect</strong> with the module.<br>
My method is as follows.</p>
<table>
<thead>
<tr>
<th style="text-align:center">Arduino</th>
<th style="text-align:center">connect</th>
<th style="text-align:center">ESP8266</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3.3V</td>
<td style="text-align:center">&lt;—&gt;</td>
<td style="text-align:center">VCC</td>
</tr>
<tr>
<td style="text-align:center">GND</td>
<td style="text-align:center">&lt;—&gt;</td>
<td style="text-align:center">GND</td>
</tr>
<tr>
<td style="text-align:center">TXD</td>
<td style="text-align:center">&lt;—&gt;</td>
<td style="text-align:center">RXD</td>
</tr>
<tr>
<td style="text-align:center">RXD</td>
<td style="text-align:center">&lt;—&gt;</td>
<td style="text-align:center">TXD</td>
</tr>
<tr>
<td style="text-align:center">3.3V</td>
<td style="text-align:center">&lt;—&gt;</td>
<td style="text-align:center">CH _PD(I added pull-up resistor 1.5K*3. Add a pull resistor about 10K on the internet.)</td>
</tr>
</tbody>
</table>
<h3 id="on-transmission-communication-of-several-modes-of-pn532">On transmission communication of several modes of PN532.</h3>
<figure data-type="image" tabindex="2"><img src="https://riddler11.github.io/post-images/1634182188847.jpg" alt="modes of PN532" loading="lazy"></figure>
<p>As you can see, there are three modes to transmit messages.<br>
HSU、SPI、I2C.</p>
<p>Used with Arduino UNO:<br>
In HSU mode, the serial port monitor will have no information (inconvenient for debugging).<br>
I have never used I2C mode. So I use SPI mode to implementation.<br>
How to turn on SPI mode? Switch <strong>channel1: OFF, channel2: ON</strong>.</p>
<p>This is the note I wrote before.<br>
<img src="https://riddler11.github.io/post-images/1634182979467.png" alt="Notes made before." loading="lazy"></p>
<p>Module connection</p>
<table>
<thead>
<tr>
<th style="text-align:center">Arduino</th>
<th style="text-align:center">connect</th>
<th style="text-align:center">PN532(SPI mode)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Pin13 or ICSP-3</td>
<td style="text-align:center">&lt;—&gt;</td>
<td style="text-align:center">SCK</td>
</tr>
<tr>
<td style="text-align:center">Pin12 or ICSP-1</td>
<td style="text-align:center">&lt;—&gt;</td>
<td style="text-align:center">MISO</td>
</tr>
<tr>
<td style="text-align:center">Pin12 or ICSP-4</td>
<td style="text-align:center">&lt;—&gt;</td>
<td style="text-align:center">MOSI</td>
</tr>
<tr>
<td style="text-align:center">Pin10</td>
<td style="text-align:center">&lt;—&gt;</td>
<td style="text-align:center">SS</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">PN532 Pin</th>
<th style="text-align:center">Description of pin</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SCK:</td>
<td style="text-align:center">Serial Clock</td>
</tr>
<tr>
<td style="text-align:center">MISO:</td>
<td style="text-align:center">Master Input Slave Output</td>
</tr>
<tr>
<td style="text-align:center">MOSI:</td>
<td style="text-align:center">Master Output Slave Input</td>
</tr>
<tr>
<td style="text-align:center">SS(CS):</td>
<td style="text-align:center">Chip Select</td>
</tr>
</tbody>
</table>
<p>Oh my god. What a terrible design. (This is what I made at that time.)<br>
<img src="https://riddler11.github.io/post-images/1634183636663.png" alt="terrible design" loading="lazy"></p>
<h3 id="hardware-running-process">Hardware running process.</h3>
<ol>
<li>Arduino power-on startup procedure.</li>
<li>Initialize the wireless module, connect the wireless module with the preset WiFi, and then connect the server written in Java through TCP protoco</li>
<li>PN532 starts and waits for the card to be read.</li>
<li>When there is a card on it, send the card ID to the server.</li>
</ol>
<p>Software part:<br>
Database design, Server based on Java.</p>
<p>Java server code:<br>
It is divided into three parts: Server part, multithreading part, and display database part (for the convenience of connecting with Android in the back).</p>
<p>Implementation effect<br>
<img src="https://riddler11.github.io/post-images/1634184937995.jpg" alt="Display" loading="lazy"><br>
<img src="https://riddler11.github.io/post-images/1634185294288.jpg" alt="Display2" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to link Bilibili Video in your article(如何在你文章中链接哔哩哔哩视频)]]></title>
        <id>https://riddler11.github.io/post/test/</id>
        <link href="https://riddler11.github.io/post/test/">
        </link>
        <updated>2021-10-12T11:40:46.000Z</updated>
        <content type="html"><![CDATA[<p>Video link effect in my article. (在我文章里链接的视频具体效果)<br>
This is my video about Java sparse array in Bilibili. (这是我在B站关于Java稀疏数组的视频)</p>
<div style="position: relative; padding: 30% 45%;">
    <iframe style="
        position: absolute; 
        width: 100%; 
        height: 100%; 
        left: 0; top: 0;" 
        src="//player.bilibili.com/player.html?aid=847220411&bvid=BV1L54y1E7RQ&cid=385215083&page=1&high_quality=1" 
        scrolling="no" 
        border="0" 
        frameborder="no" 
        framespacing="0" 
        allowfullscreen="true">
    </iframe>
</div>
<p>Key code segment. Other tools that support markdown may also be used.(关键代码段，其它支持markdown语法的工具也许同样能使用)</p>
<pre><code>&lt;div style=&quot;position: relative; padding: 30% 45%;&quot;&gt;
    &lt;iframe style=&quot;
        position: absolute; 
        width: 100%; 
        height: 100%; 
        left: 0; top: 0;&quot; 
        src=&quot;//player.bilibili.com/player.html?aid=847220411&amp;bvid=BV1L54y1E7RQ&amp;cid=385215083&amp;page=1&amp;high_quality=1&quot; 
        scrolling=&quot;no&quot; 
        border=&quot;0&quot; 
        frameborder=&quot;no&quot; 
        framespacing=&quot;0&quot; 
        allowfullscreen=&quot;true&quot;&gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</code></pre>
<h1 id="operation-video-of-this-article-andhow-to-build-a-blog-by-gridea">Operation video of this article andhow to build a blog by Gridea.</h1>
<div style="position: relative; padding: 30% 45%;">
    <iframe style="
        position: absolute; 
        width: 100%; 
        height: 100%; 
        left: 0; top: 0;" 
        src="//player.bilibili.com/player.html?aid=633622827&bvid=BV1fb4y187r9&cid=424484231&page=1&high_quality=1" 
        scrolling="no" 
        border="0" 
        frameborder="no" 
        framespacing="0" 
        allowfullscreen="true">
    </iframe>
</div>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ Real-time monitoring of ambient temperature base on Nodemcu / ESP12F]]></title>
        <id>https://riddler11.github.io/post/nodemcuesp12f-bei-ke-wu-lian-shi-shi-jian-kong-huan-jing-wen-du/</id>
        <link href="https://riddler11.github.io/post/nodemcuesp12f-bei-ke-wu-lian-shi-shi-jian-kong-huan-jing-wen-du/">
        </link>
        <updated>2021-02-19T01:52:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="nodemcuesp12f-real-time-monitoring-of-ambient-temperature">nodemcu/ESP12F Real-time monitoring of ambient temperature.</h2>
<p>Bigiot renderings are as follows：<img src="https://upload-images.jianshu.io/upload_images/24469819-664e1a8487b0c1e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="The effect is as follows" loading="lazy"></p>
<h2 id="realization-idea">Realization idea</h2>
<ol>
<li>Firstly,connect the device to the internet.</li>
<li>Connect the BIGIOT net.</li>
<li>Send information regularly.</li>
</ol>
<figure data-type="image" tabindex="1"><img src="https://upload-images.jianshu.io/upload_images/24469819-b3efff66bade4e00?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Actual hardware diagram" loading="lazy"></figure>
<h3 id="i-have-searched-a-lot-of-data-but-i-have-not-found-any-actual-and-effective-data-to-assist-me-in-implementation">I have searched a lot of data, but I have not found any actual and effective data to assist me in implementation.</h3>
<p>So I studied and transformed it into a code for transmitting information with the help of bigiot's control code.<br>
This may be the first non Lua but C language code in the whole network.</p>
<h2 id="critical-code">critical code：</h2>
<pre><code>//Upload information to the interface
 String msg1 =&quot;{\&quot;M\&quot;:\&quot;update\&quot;,\&quot;ID\&quot;:\&quot;&quot;+did+&quot;\&quot;,\&quot;V\&quot;:{\&quot;&quot;+inputid+&quot;\&quot;:\&quot;&quot;+value+&quot;\&quot;}}\n&quot;;
 client.print(msg1);
</code></pre>
<p><a href="https://www.bilibili.com/video/BV1Yi4y1T7SD/">Code explanation video in chinese</a></p>
<p><a href="https://download.csdn.net/download/qq_42428700/15364861">Click here to go to CSDN to download the code</a></p>
<p>This article is also written in CSDN.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Detailed explanation of application effect and code of soil humidity sensor base on nodemcu/ESP12F]]></title>
        <id>https://riddler11.github.io/post/nodemcuesp12f-tu-rang-shi-du-chuan-gan-qi-shi-yong-xiao-guo-ji-dai-ma-xiang-jie/</id>
        <link href="https://riddler11.github.io/post/nodemcuesp12f-tu-rang-shi-du-chuan-gan-qi-shi-yong-xiao-guo-ji-dai-ma-xiang-jie/">
        </link>
        <updated>2021-02-04T07:55:04.000Z</updated>
        <content type="html"><![CDATA[<p>First, attach the effect drawing. In order to facilitate debugging and writing code, I use ** Arduino ide ** to write code.<br>
Window monitor print real-time effect:<br>
<img src="https://upload-images.jianshu.io/upload_images/24469819-62434c37876f9461.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Window monitor print real-time effect" loading="lazy"></p>
<p>The hardware circuit diagram is drawn by myself and made by the merchant. The following figure is my actual hardware diagram.<br>
<img src="https://upload-images.jianshu.io/upload_images/24469819-8d7266d9304658b1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Hardware diagram" loading="lazy"></p>
<h4 id="the-soil-moisture-sensor-i-use">The soil moisture sensor I use</h4>
<figure data-type="image" tabindex="1"><img src="https://upload-images.jianshu.io/upload_images/24469819-113606ca00fbf968.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="This is the soil moisture sensor I bought" loading="lazy"></figure>
<h4 id="pin-details-as-shown-in-the-figure">Pin details as shown in the figure</h4>
<figure data-type="image" tabindex="2"><img src="https://upload-images.jianshu.io/upload_images/24469819-dc9c68f93adeca54.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Pin details" loading="lazy"></figure>
<h2 id="wiring-between-soil-moisture-sensor-and-nodemcuesp12fesp8266-can-also-be-referred">Wiring between soil moisture sensor and nodemcu（ESP12F/ESP8266 can also be referred）</h2>
<figure data-type="image" tabindex="3"><img src="https://upload-images.jianshu.io/upload_images/24469819-df984bf09e0d9c99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Wiring diagram" loading="lazy"></figure>
<h2 id="what-is-read-in-the-code-is-the-analog-signal-value-in-fact-only-three-pins-ao-gnd-and-vcc-are-connected">What is read in the code is the analog signal value. In fact, only three pins * AO, GND and VCC * are connected</h2>
<h2 id="next-is-the-code-section">Next is the code section：</h2>
<pre><code>/**********************************************************************
author：燊哥仔
bilibili Video Explanation：https://www.bilibili.com/video/BV1Lp4y1s7J4
The code is very simple. You can see the effect by using the serial port monitor of IDE
Actually connect three pins is OK AO、GND、VCC
***********************************************************************/
int sense_Pin = 0; // Soil sensor input connected to analog pin A0
int value = 0; //initialize variable value

void setup() {
  Serial.begin(115200);//Set baud rate to115200
  Serial.println(&quot;\n&quot;);//Newline
}

void loop() {
  
  value = analogRead(sense_Pin);//Analog data reading（A0 pin input data）
  value = value / 10;    //The above value divided by ten is assigned to value
 
  Serial.print(value);
  Serial.println(&quot;%&quot;);
 
  if (value &lt; 50)//When the value is less than 50, judge the result
  {
    
    Serial.println(&quot;The soil is WET&quot;);//Window monitor print the situation
  }
  else
  {
  
    Serial.println(&quot;The soil is dry&quot;);
  }
  delay(1000);//Delay1 second. Read every second
}
</code></pre>
<p><a href="https://download.csdn.net/download/qq_42428700/15044707">Download code from CSDN</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Remote control car base on MCS 51 ]]></title>
        <id>https://riddler11.github.io/post/51-dan-pian-ji-xiao-che/</id>
        <link href="https://riddler11.github.io/post/51-dan-pian-ji-xiao-che/">
        </link>
        <updated>2020-12-30T07:57:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1circuit-design">1.Circuit Design</h1>
<h4 id="before-you-start-determine-the-components-to-use">Before you start, determine the components to use.</h4>
<p>Try to select the components that control the trolley.<br>
As the title：<br>
Main control chip：AT89C52 chip<br>
A toy car（which have two motor.The front motor controls the left and right, and the rear motor controls the front and rear）<br>
A chip or module that controls a motor：L298/L9110<br>
Wireless module：NRF24L01（If you like, you can use ESP8266 networking control or HC05 Bluetooth control）<br>
Drop-Out Voltage-Regulator module：5V to 3.3V（The voltage used in NRF24L01 is 3.3V）</p>
<h4 id="the-next-step-is-to-draw-circuit-diagram">The next step is to draw circuit diagram</h4>
<p>You can use your hand or some software to draw, this step is to know what you want.</p>
<ol>
<li><strong>The minimum system</strong>is the core of  the hardware circuit design.Because of this you should design the minimum system first.</li>
<li>And then  design <strong>the switch and power</strong> .With the power and switch single chip microcomputer can work.</li>
<li>In China you can not only buy components by using TaoBao, but also use it to see some reference details of the components. For example, the control motor chip on this article, you can see the reference details below Taobao<br>
such as：How does L298 work and so on.<strong>In this step you can figure out how the components work</strong></li>
<li>Next is to<strong>connect the chips and modles with the single chip microcomputer</strong>.</li>
<li>Tips: Remember to <strong>reserve the port to upload the code</strong>.Otherwise, it's a headache if you don't keep the port to upload you have to remove the chip to upload it everytime. You can use a <strong>IDC connector(such as 10pin X9555WV-2X05-6TV01) and a USB TO RS232/485/TTL</strong>to upload your code.</li>
</ol>
<p>####After completing the above steps, you can start drawing PCB</p>
<p>Draw PCB according to your own circuit diagram.(I use DXP to draw PCB)</p>
<p>Of course, DXP provides a tool that can draw circuit schematic diagrams.You can use it directly to draw the schematic diagram and the schematic library.</p>
<p>After painting, remember to** check **whether the connection is connected, etc</p>
<h4 id="proofing">Proofing</h4>
<p>Send the design drawings to the factory, and the factory will help you proofing.<br>
After <strong>welding</strong>,then you can debug.</p>
<h1 id="2code-debug">2.Code debug</h1>
<p>####Complete the above design<br>
You can <strong>simulation</strong> in protues before you upload the code in the chip.<br>
This method can simulate the running state of hardware under real conditions.</p>
<h4 id="the-first-thing-to-do-is-to-let-the-car-move">The first thing to do is to let the car move.</h4>
<ol>
<li>When the trolley moves, first prove that the trolley motor is OK, and then there can be a later control activity.</li>
<li>If the car can't move, check the problem **maybe the motor problem****maybe the L298 problem <strong>or some problems with the</strong> circuit board **be good at using <strong>multimeter</strong> at this time.</li>
<li>The motor test is very simple. Connect it with a battery to see if it will move.（It is better to connect a resistor in series. In case of excessive current, the motor may burn during the detection process。）</li>
<li>Other part use a multimeter to check whether there is electricity or not 。</li>
</ol>
<h4 id="the-next-step-is-to-debug-the-control-code">The next step is to debug the control code</h4>
<p>NRF24L01 is used to control in the design, so** pay attention to the voltage**<br>
The voltage of 51 single chip microcomputer is 5V, and this module is 3.3V<br>
If the module burns out, it is impossible to control it。<br>
Assuming that the computer controls, the ** computer is the information sending end and the single chip microcomputer is the information receiving end**</p>
<p>Single control first（such as go forward, P2.0 port is 0, P2.1 port is 1, and the single chip microcomputer receives the signal &quot;1&quot;）<br>
In the computer, use the serial port debugging assistant to send the signal of 1<br>
<img src="https://upload-images.jianshu.io/upload_images/24469819-5bc19ca12b76e704.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Example diagram of serial port debugging assistant" loading="lazy"></p>
<h5 id="key-code-examples-of-single-chip-microcomputer">Key code examples of single chip microcomputer</h5>
<pre><code>    if(	rece_buf[1]=='1') 	 		//After the first bit is the received command data, rece_buf[0] is the length of data bits.
   
                {
                  M0=0；                        //sbit M0 = P2^0   sbit M1 = P2^1
                  M1=1；
                }

</code></pre>
<h4 id="proceed-to-the-next-step-after-successful-debugging">Proceed to the next step after successful debugging</h4>
<p>Reverse, stop, left turn and right turn control are completed in the same way.Then implementation the project.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building Elevator System Based on 51 Single-chip Microcomputer]]></title>
        <id>https://riddler11.github.io/post/building-elevator-system-based-on-51-single-chip-microcomputer/</id>
        <link href="https://riddler11.github.io/post/building-elevator-system-based-on-51-single-chip-microcomputer/">
        </link>
        <updated>2020-11-04T10:15:17.000Z</updated>
        <content type="html"><![CDATA[<h1 id="project-forecast">Project forecast</h1>
<h4 id="this-project-is-a-pure-hardware-project">This project is a pure hardware project.</h4>
<p>Project composition: AT89C52 controller. 0.36 inch Nixie Tube. 3.0mm 8*8LED dot matrix. JQ8400FL10P voice broadcast. Other component design drawings are marked.</p>
<p>This project will only give PcbDoc files, so as not to draw hands or copy, paste and modify them.</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/img_convert/7536f07c06d94bafc80735391705ab1c.png" alt="PCB design" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/img_convert/fd2a907af86dd017f129e2dbff517fde.png" alt="Actual circuit board" loading="lazy"></figure>
<p>Because it is a course design done before, this one also has a simulation design Proteus file, and the Proteus version is 8.6.<br>
<img src="https://img-blog.csdnimg.cn/img_convert/e4ccfa048af1e76f763c64c8c822741b.png" alt="Simulation code running effect." loading="lazy"></p>
<h2 id="please-look-forward-to-it-and-i-will-upload-it-when-im-free20201104">Please look forward to it and I will upload it when I'm free.（2020.11.04）</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Punch-in Statistics System for “Xuexi Qiangguo”]]></title>
        <id>https://riddler11.github.io/post/xue-xi-qiang-guo-da-qia-xi-tong/</id>
        <link href="https://riddler11.github.io/post/xue-xi-qiang-guo-da-qia-xi-tong/">
        </link>
        <updated>2020-11-03T07:56:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="the-project-is-purely-software">The project is purely software</h2>
<p>At present, the drilling of learning ability is realized in the form of ** website **. Its original design purpose is to improve the accuracy of statistics and facilitate the students on duty to watch the clock in every day, thus producing the idea of making this system. It has been put into use</p>
<h2 id="system-architecture">System architecture</h2>
<p>The system architecture is expanded based on MVC development mode, including database data layer, model layer, Dao data persistence layer, service business logic layer and controller / servlet controller. The division of labor at each level is clear and the coupling degree of levels is reduced.</p>
<h4 id="view-layer">View layer</h4>
<p>The system adopts B / S mode. Most display pages are JSP / HTML. In order to meet the display of page UI, ajax data exchange is in JSON format. This layer is closely combined with the control layer, and they need to work together.</p>
<h2 id="controller-layer">Controller layer</h2>
<p>The controller layer is responsible for the control of specific business module processes, which not only makes the program structure clear, but also greatly reduces the amount of code.<br>
The control layer is mainly used to respond to client requests. Whenever a request is sent to the system, the control layer will call the corresponding business logic. There are many kinds of requests, such as ajax data request, page request, file upload and file download. The control layer will make corresponding data return, page Jump and stream return.</p>
<h2 id="data-persistence-layer">Data persistence layer</h2>
<p>The Dao layer mainly does the work of the data persistence layer, and some tasks responsible for contacting the database are encapsulated here. The design of the Dao layer first designs the Dao interface, and then designs the implementation class.</p>
<h2 id="contact-of-each-layer">Contact of each layer</h2>
<p>The Dao layer can be developed independently with low mutual coupling, and can be carried out independently. Such a mode has particular advantages in the process of developing large projects. The controller and view layers need to be developed together because of their high coupling, but they can also be developed as a whole independent of the first two layers. In this way, we only need to know the definition of the interface between layers, and call the interface to complete the required logical unit application. Everything is very clear and simple.</p>
<h4 id="the-following-figure-shows-the-current-website-functional-architecture">The following figure shows the current website functional architecture</h4>
<figure data-type="image" tabindex="1"><img src="https://upload-images.jianshu.io/upload_images/24469819-6922a2d72dee42ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Current website architecture" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://upload-images.jianshu.io/upload_images/24469819-2d3437085ecd86cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Effect drawing of login interface" loading="lazy"></figure>
<p><a href="https://gitee.com/riddler11/clock-in?_from=gitee_search">Gitee download address, click here directly</a>，This code is still the code with * * bug * * before. Understanding the code and making corresponding modifications will make great progress.</p>
<p><strong>The code here is developed using the following software</strong>：Development tool：MyEclipse10，Database：MySQL 5.1.32-community，Graphical interface database operation：navicat，Java environment：jdk1.8.0_131.</p>
<p><strong>Later, I used eclipse to develop</strong>，When JDK6 is changed to a higher version in MyEclipse, some errors will occur in MyEclipse. There is no file class requested by image processing. Anyway, if two jdk version exist, it will causing some code bugs; Like not executing identification codes or something.</p>
<h5 id="bug-in-the-orignal-project">Bug in the orignal project</h5>
<ul>
<li>The number of clocking days is increased to 100 when it reaches 99 days, and the data of 99 days is checked and modified all the time.</li>
</ul>
<h5 id="the-process-and-realization-of-clock-in-days">The process and Realization of clock in days</h5>
<ul>
<li>In the point entry interface, fill in the scores, or upload pictures for identification. After there is content in the input box, click upload, and the clock in days will increase automatically.</li>
<li>The personal design is realized by comparing the time. The registration time will be automatically recorded during registration, and then the clock in days will be calculated by comparing with the registration time.</li>
</ul>
<p>Three cases：</p>
<ol>
<li>Clock in on the day of registration</li>
<li>Didn't clock in on the day of registration</li>
<li>Clock in after registration</li>
</ol>
<ul>
<li>The details should be combined with the code</li>
</ul>
<p>The reason for the bug is when designing the database，The data type is varchar(255), And then on day 99, The code always judges 99 as the maximum number of days. My personal idea to solve this bug is(Judge the latest clock in number, because the clock in number increases automatically and the data type is int).When I write here, I suddenly remember that the number of branch days seems to be of varchar type. I'll change this when I'm free.<br>
<img src="https://upload-images.jianshu.io/upload_images/24469819-acab8586da67e47e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mood" loading="lazy"></p>
<figure data-type="image" tabindex="3"><img src="https://upload-images.jianshu.io/upload_images/24469819-4a86633ca9568bbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Points entry interface" loading="lazy"></figure>
<h2 id="when-the-project-is-uploaded-to-the-server-and-run-the-bugs-are-more-interesting">When the project is uploaded to the server and run, the bugs are more interesting.</h2>
<ol>
<li>
<p>No problem with local database entry. But when the server uploads Chinese into the database, it is garbled.（Add <strong>useunicode = true &amp; characterencoding = UTF-8</strong> in <strong>db.properties</strong> to solve the problem）<a href="https://blog.csdn.net/weixin_30765577/article/details/99580949?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param">Problem solving link</a></p>
</li>
<li>
<p>The JDK of Tomcat 7 version is only 1.7. The algorithms of image processing cannot be used. As shown in the figure, an error will be reported<br>
<img src="https://upload-images.jianshu.io/upload_images/24469819-3af03fc398c40a1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Request error graph" loading="lazy"></p>
</li>
<li>
<p>The tomacat 8 version is finally ready for JDK1.8, and the feelings entered in the result are all  <em>？？？？？</em>（garbled），Check the data on the Internet and find that tomcat8 can directly help you deal with the problem of characters. It defaults to UTF-8. My method transcodes the tomcat7 version into iso-8859-1. In order not to cause great changes, I changed the code to ISO-8859-1。<a href="https://blog.csdn.net/lzl_avery/article/details/87348937">Problem solving link</a></p>
</li>
</ol>
<p>4.The best bug is nothing more than this. I developed this project using the windows operating system. The storage directory path is shown as the forward slash“\”<br>
<img src="https://upload-images.jianshu.io/upload_images/24469819-436ab64fdf7dd4cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Storage directory path" loading="lazy"><br>
However, the actual server is a Linux system. Let's take a look at the server without changing the code（See the figure below） <em>img\学号\图片名</em> (Surprise, it has created a strange folder that can't be accessed yet). Next, let's look at the actual storage path of the server. As shown in the figure, the backslash &quot;/&quot; is used for storage.As a result, storage problems arise，<strong>The solution is to change the forward slash to the backslash</strong><br>
<img src="https://upload-images.jianshu.io/upload_images/24469819-94d96b7c79c9536e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Do not change the path of code storage diagram" loading="lazy"><br>
<img src="https://upload-images.jianshu.io/upload_images/24469819-9b26d297b5569c41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Server storage path" loading="lazy"></p>
<h2 id="places-to-be-promoted">Places to be promoted</h2>
<p>In the points interface, you can add * * number of days to punch * * to compare with the actual number of days to punch.In fact, I wrote this part of the code method myself, but there were a few small problems when I actually wrote it on the front end, and I don't have time to solve them yet.<br>
<img src="https://upload-images.jianshu.io/upload_images/24469819-e43088944d0c82e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Integral interface diagram" loading="lazy"></p>
<p>This website can actually be converted into ** wechat applet ** to clock in，Capable students or students who want to have this ability can learn from the database structure and code written by my back-end and use them to achieve.<br>
<strong>Genius can be ignored and developed directly on demand.</strong></p>
<p>I implement image processing here by using the API provided by others. Low recognition rate is a problem<strong>This is also the knowledge what I lack</strong></p>
<p>** You can add functions such as meeting sign in**. Make the software more rich and humanized</p>
<h5 id="finally-i-attached-the-supply-and-demand-analysis-of-the-small-program-i-wanted-to-make-at-that-time">Finally, I attached the supply and demand analysis of the small program I wanted to make at that time</h5>
<figure data-type="image" tabindex="4"><img src="https://upload-images.jianshu.io/upload_images/24469819-bd9045e5556cb842.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微信小程序版" loading="lazy"></figure>
<p>The above is written on November 3, 2020. If there is any supplement, follow up<br>
<img src="https://upload-images.jianshu.io/upload_images/24469819-acab8586da67e47e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Remote control desk lamp based on ESP8266]]></title>
        <id>https://riddler11.github.io/post/esp8266-yuan-cheng-kong-zhi-tai-deng/</id>
        <link href="https://riddler11.github.io/post/esp8266-yuan-cheng-kong-zhi-tai-deng/">
        </link>
        <updated>2020-09-21T12:50:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="hardware">Hardware</h2>
<p>micro USB</p>
<p>USB JACKS</p>
<p>relay</p>
<p>Some of resistance and capacitance</p>
<p>ESP8266-12F</p>
<p>CH340C</p>
<h2 id="hardware-circuit">Hardware circuit</h2>
<h4 id="usb-to-uart-one-button-download-circuit">USB to UART one button download circuit</h4>
<figure data-type="image" tabindex="1"><img src="https://upload-images.jianshu.io/upload_images/24469819-7af4fa842b3649e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CH340C的电路设计" loading="lazy"></figure>
<h4 id="5v-to-33v-circuit-voltage-reduction-power-supply">5V to 3.3V circuit (voltage reduction, power supply)</h4>
<figure data-type="image" tabindex="2"><img src="https://upload-images.jianshu.io/upload_images/24469819-9260f8db2dd30164.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5V转3.3V" loading="lazy"></figure>
<h4 id="esp8266-12f-main-control-circuit">Esp8266-12f main control circuit</h4>
<figure data-type="image" tabindex="3"><img src="https://upload-images.jianshu.io/upload_images/24469819-78cd55e6ee1d8b73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最小系统" loading="lazy"></figure>
<h4 id="key-circuit">Key circuit</h4>
<figure data-type="image" tabindex="4"><img src="https://upload-images.jianshu.io/upload_images/24469819-b466c78c8baafa79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手动复位等，万一自动下载不工作就靠这个" loading="lazy"></figure>
<h4 id="relay-circuit">Relay circuit</h4>
<p>In order to supply sufficient power to USB and avoid the stroboscopic light due to insufficient power supply, a capacitor is added and used to charge and discharge the capacitor to provide sufficient voltage (this is my personal idea. I don't know whether it is correct or not. It can only be tested in practice. Readers are also welcome to criticize and correct).<br>
<img src="https://upload-images.jianshu.io/upload_images/24469819-118c7ceaca18a6ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="继电器电路" loading="lazy"></p>
<h4 id="general-circuit-schematic-diagram">General circuit schematic diagram</h4>
<figure data-type="image" tabindex="5"><img src="https://upload-images.jianshu.io/upload_images/24469819-5725242dadfa7caf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="总原理图" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://upload-images.jianshu.io/upload_images/24469819-861d320360992db3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PCB 3D效果图" loading="lazy"></figure>
<p>###2020.8.28 Challenge part<br>
  When the board was welded, the first board was found to have a problem with the chip of ch340c after all the welding was completed. In the morning, the burning circuit ch340c was welded separately. The burning circuit in the new version is no problem, and the computer can recognize it successfully<br>
  Because they were too confident and didn't buy more components, it was difficult to check where there were errors in the first board, and they didn't check the schematic diagram well. Buying fewer components resulted in not having to weld three resistors. Although there was a minimum system, the downloaded firmware esp12f showed a very strange state of flashing all the time, but didn't run normally.<br>
<img src="https://upload-images.jianshu.io/upload_images/24469819-300b20bccdbb2214.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="On the left is the welded plate. It was welded down because of the damage of ch340c. On the right is contrast detection. The download circuit is OK" loading="lazy"><br>
  <strong>For more analysis, you can watch the video shared synchronously by BiliBili</strong><br>
<a href="https://www.bilibili.com/video/BV17K411K79i?pop_share=1">BiliBili synchronized analysis video</a></p>
<p>###2020.8.31 Control desk lamp successfully<br>
<a href="https://www.bilibili.com/video/BV1Ci4y1M7DL?pop_share=1">Click here to view the effect in bilibili</a><br>
<img src="https://upload-images.jianshu.io/upload_images/24469819-8a2c5539244e3546.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Light up the table lamp picture through the app written by myself" loading="lazy"><br>
 The board designed by myself can theoretically control all devices powered by USB 5V.</p>
<h2 id="hardware-code-part">Hardware code part</h2>
<p>1.  Download firmware for esp8266-12f first（You can download <strong>AT firmware</strong> first, and then overwrite and download <strong>nodemcu firmware</strong> to avoid errors）</p>
<ol start="2">
<li>Then write code. You can use esplorer to write code with Lua, or use arduinoIDE to write code in C language. I use C language more and use arduinoIDE more, so I choose arduinoIDE.</li>
</ol>
<p>Code idea: first connect to WiFi, after that connect to the Internet, and then connect to IOT platform（Here I use BIGIOIT platform to conduct intranet penetration, so that the information sent by the external network can be received）. Then write the control code（There is a demo in BIGIOT, so it's easy to modify the demo then to achieve what I need.）</p>
<pre><code>/*
This file needs to be supported by Arduino esp8266 development environment. For environment construction, you can see in: http://www.bigiot.net/talk/237.html

This program can be used to control two relays
Esp8266 burns into this program directly and uses the high and low electric frequency control optocoupler relay to control the electric lamp
By default, my relay is turned on at high power frequency, so it is initialized to low level during initialization. Play turns on d5 and stop turns off the light on D5.ESP8266 as a prompt light .
Code based :https://github.com/bigiot/bigiotArduino/blob/master/examples/ESP8266/kaiguan/kaiguan.ino
Adjust the code on. This code can be directly burned into nodemcu module. I hope it will be helpful for you to share the code (2020.9.7)
    此文件需安装Arduino esp8266开发环境支持，环境搭建参见：http://www.bigiot.net/talk/237.html
    本程序可以用来控制两路继电器
    ESP8266烧入此程序直接，使用高低电频控制光耦继电器来控制电灯
    我的继电器默认高电频开启，所以在初始化时都初始化为低电平，play开启D5，stop关闭D5.ESP8266上的灯作为提示灯
    代码基于https://github.com/bigiot/bigiotArduino/blob/master/examples/ESP8266/kaiguan/kaiguan.ino
    上的代码进行调整，此代码可以直接烧入到nodemcu模块，分享代码希望对大家有帮助（2020.9.7）
*/

#include &lt;ESP8266WiFi.h&gt;
#include &lt;aJSON.h&gt;

//=============  It must be modified here============
String DEVICEID=&quot;***&quot;; // Your equipment number   ==
String  APIKEY = &quot;***&quot;; // Device password==//BIGIOT information
//=======================================
unsigned long lastCheckInTime = 0; //Record the last check-in time
const unsigned long postingInterval = 40000; // Report to the server every 40 seconds

const char* ssid     = &quot;***&quot;;//Wifi name
const char* password = &quot;***&quot;;//Wifi password

const char* host = &quot;www.bigiot.net&quot;;
const int httpPort = 8181;

int ELed=D4;

int SW=D5;
int SW1=D6;
//int arr_len = sizeof(pins)/sizeof(pins[0]);

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  WiFi.begin(ssid, password);
  //The default output turns off the electrical frequency
  pinMode(ELed,OUTPUT);
  pinMode(SW,OUTPUT);
  pinMode(SW1,OUTPUT);
  digitalWrite(ELed,HIGH);
  digitalWrite(SW,LOW);
  digitalWrite(SW1,LOW);

  
}

WiFiClient client;

void loop() {

  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(&quot;.&quot;);
  }

  // Use WiFiClient class to create TCP connections
  if (!client.connected()) {
    if (!client.connect(host, httpPort)) {
      Serial.println(&quot;connection failed&quot;);
      delay(5000);
      return;
    }
  }

  if(millis() - lastCheckInTime &gt; postingInterval || lastCheckInTime==0) {
    checkIn();
  }
  
  // Read all the lines of the reply from server and print them to Serial
  if (client.available()) {
    String inputString = client.readStringUntil('\n');
    inputString.trim();
    Serial.println(inputString);
    int len = inputString.length()+1;
    if(inputString.startsWith(&quot;{&quot;) &amp;&amp; inputString.endsWith(&quot;}&quot;)){
      char jsonString[len];
      inputString.toCharArray(jsonString,len);
      aJsonObject *msg = aJson.parse(jsonString);
      processMessage(msg);
      aJson.deleteItem(msg);          
    }
  }
}

void processMessage(aJsonObject *msg){
  aJsonObject* method = aJson.getObjectItem(msg, &quot;M&quot;);
  aJsonObject* content = aJson.getObjectItem(msg, &quot;C&quot;);     
  aJsonObject* client_id = aJson.getObjectItem(msg, &quot;ID&quot;);
  if (!method) {
    return;
  }
    String M = method-&gt;valuestring;
    if(M == &quot;say&quot;){
      String C = content-&gt;valuestring;
      String F_C_ID = client_id-&gt;valuestring;
      if(C == &quot;sw1&quot;){

        digitalWrite(ELed,LOW); //The light on ESP8266 is on
        digitalWrite(SW,HIGH);//D5 port is powered on
        sayToClient(F_C_ID,&quot;LED All on!&quot;);    
      }else if(C == &quot;stop1&quot;){

        digitalWrite(ELed,HIGH);//The light on ESP8266 is off
        digitalWrite(SW,LOW);//D5 port is powered off
        sayToClient(F_C_ID,&quot;LED All off!&quot;); // You  can see this hint in Bigiot
      }else if(C==&quot;sw2&quot;){
         digitalWrite(ELed,LOW);
        digitalWrite(SW1,HIGH);//D6 port is powered on
        sayToClient(F_C_ID,&quot;SW2 ON!&quot;);
        }else if(C==&quot;stop2&quot;){
         digitalWrite(ELed,HIGH);
        digitalWrite(SW1,LOW);//D6 port is powered off
        sayToClient(F_C_ID,&quot;SW2 OFF!&quot;);
        }
        

    }
}

void checkIn() {
    String msg = &quot;{\&quot;M\&quot;:\&quot;checkin\&quot;,\&quot;ID\&quot;:\&quot;&quot; + DEVICEID + &quot;\&quot;,\&quot;K\&quot;:\&quot;&quot; + APIKEY + &quot;\&quot;}\n&quot;;
    client.print(msg);
    lastCheckInTime = millis(); 
}

void sayToClient(String client_id, String content){
  String msg = &quot;{\&quot;M\&quot;:\&quot;say\&quot;,\&quot;ID\&quot;:\&quot;&quot; + client_id + &quot;\&quot;,\&quot;C\&quot;:\&quot;&quot; + content + &quot;\&quot;}\n&quot;;
  client.print(msg);
  lastCheckInTime = millis();
}
</code></pre>
<h2 id="control-software">control software</h2>
<p>Develop an app yourself or use the app provided by bigiot<br>
Here I use the app developed by Hbuilderx, 5 + app. In short, it is a website app.<br>
Reference code section：</p>
<pre><code>//2020.9.15 update
&lt;!DOCTYPE html&gt;
&lt;html &gt;
&lt;head &gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot; /&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;script src=&quot;js/mui.min.js&quot;&gt;&lt;/script&gt;
	&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/1.css&quot;/&gt;
    &lt;link href=&quot;css/mui.min.css&quot; rel=&quot;stylesheet&quot;/&gt;
    &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;
      	mui.init();
    &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;div class=&quot;abg&quot;&gt;//Here class is a CSS style background picture written by myself.
	&lt;br&gt;
	&lt;div style=&quot;margin: auto;text-align: center;font-size: x-large;color: white;font:;&quot;&gt;&lt;label&gt;宿舍台灯控制&lt;/label&gt;&lt;/div&gt;
	
	
			&lt;br&gt;
			&lt;div class=&quot;bod&quot;&gt;
			&lt;div style=&quot;display: flex;color: white;&quot;&gt;&lt;label&gt;开关1：&lt;/label&gt;
				&lt;div class=&quot;mui-switch &quot; id=&quot;mySwitch&quot;&gt;
					&lt;div class=&quot;mui-switch-handle&quot;&gt;&lt;/div&gt;
				&lt;/div&gt;
				&lt;div style=&quot;display: flex; color: white;&quot;&gt;&lt;label&gt;&amp;nbsp;&amp;nbsp;开关2：&lt;/label&gt;
					&lt;div class=&quot;mui-switch &quot; id=&quot;mySwitch1&quot;&gt;
						&lt;div class=&quot;mui-switch-handle&quot;&gt;&lt;/div&gt;
					&lt;/div&gt;
				&lt;/div&gt;
			&lt;/div&gt;
			
	
			
			
&lt;/div&gt;
	&lt;script type=&quot;text/javascript&quot;&gt;
			var ws = new WebSocket(&quot;ws://www.bigiot.net:8383&quot;);
			//var lb = document.getElementById(&quot;lb2&quot;)
			ws.onopen = function() {
				
				mui.toast(&quot;连接成功&quot;)//The software interface shows that the connection is successful
			};
			ws.onmessage = function(evt) {
				var received_msg = evt.data;
				//lb.innerText = received_msg
				console.log(received_msg);
				var obj = JSON.parse(received_msg)
				if (obj.M == &quot;WELCOME TO BIGIOT&quot;) {
					ws.send('{&quot;M&quot;:&quot;checkin&quot;,&quot;ID&quot;:&quot;设备ID&quot;,&quot;K&quot;:&quot;APIKEY&quot;}')//Send connection device
				}
				if(obj.M==&quot;checkinok&quot;){
					mui.toast(&quot;服务器连接成功！可以进行控制&quot;)//Here is to judge whether BIGIOT has returned successful connection information
				}
				if (obj.M == &quot;ping&quot;) //Determine whether the heartbeat packet is received
				{
					ws.send('{&quot;M&quot;:&quot;beat&quot;}') //Send heartbeat packet data
				}
			};
			document.getElementById(&quot;mySwitch&quot;).addEventListener(&quot;toggle&quot;, function(event) {
				if (event.detail.isActive) {
					mui.toast(&quot;打开开关1&quot;)
					console.log(&quot;你启动了开关&quot;);
					ws.send('{&quot;M&quot;: &quot;say&quot;,&quot;ID&quot;: &quot;D+设备ID&quot;,&quot;C&quot;: &quot;sw1&quot;,&quot;SIGN&quot;: &quot;xx3&quot;}')//D+设备ID,D代表设备。D+ID代表要发送信息到我们的esp8266设备
				} else {
					mui.toast(&quot;关闭开关1&quot;)
					ws.send('{&quot;M&quot;: &quot;say&quot;,&quot;ID&quot;: &quot;D+设备ID&quot;,&quot;C&quot;: &quot;stop1&quot;,&quot;SIGN&quot;: &quot;xx3&quot;}')//这里发送的命令要跟ESP8266的判断的命令相匹配才会产生效果
					console.log(&quot;你关闭了开关&quot;);
				}
			})
			document.getElementById(&quot;mySwitch1&quot;).addEventListener(&quot;toggle&quot;, function(event) {
				if (event.detail.isActive) {
					mui.toast(&quot;打开开关2&quot;)
					console.log(&quot;你启动了开关&quot;);
					ws.send('{&quot;M&quot;: &quot;say&quot;,&quot;ID&quot;: &quot;D+设备ID&quot;,&quot;C&quot;: &quot;sw2&quot;,&quot;SIGN&quot;: &quot;xx3&quot;}')
				} else {
					mui.toast(&quot;关闭开关2&quot;)
					ws.send('{&quot;M&quot;: &quot;say&quot;,&quot;ID&quot;: &quot;D+设备ID&quot;,&quot;C&quot;: &quot;stop2&quot;,&quot;SIGN&quot;: &quot;xx3&quot;}')
					console.log(&quot;你关闭了开关&quot;);
					
				}
			})
			
		&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>##Finally, the software interface is attached<br>
<img src="https://upload-images.jianshu.io/upload_images/24469819-0ad4360f6346f5db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Software interface renderings" loading="lazy"></p>
<p>The file is open source（2020.9.15），Gitee download address: https://gitee.com/riddler11/esp8266-control-desk-lamp/tree/master/</p>
<p>（2020.9.21）When applied to control desk lamps, some lamps will have stroboscopic problems. The preliminary analysis is that the internal components will divide the voltage and fail to reach the rated voltage, resulting in failure to work normally. It is necessary to analyze and calculate the circuit to solve this problem.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Draws Arduino with AD, including schematic diagram and challenge I met]]></title>
        <id>https://riddler11.github.io/post/ad-hui-zhi-arduinohan-yuan-li-tu-ji-zi-ji-yu-guo-de-keng/</id>
        <link href="https://riddler11.github.io/post/ad-hui-zhi-arduinohan-yuan-li-tu-ji-zi-ji-yu-guo-de-keng/">
        </link>
        <updated>2020-08-18T07:56:21.000Z</updated>
        <content type="html"><![CDATA[<h4 id="i-use-altium-designer15">I use Altium Designer15.</h4>
<h4 id="drawing-is-the-arduino-uno-board">Drawing is the Arduino uno board.</h4>
<h4 id="including-four-part-circuitspower-supply-circuit-comparison-circuit-usb-download-circuit-and-avr-single-chip-microcomputer-circuit">Including four part circuits（Power supply circuit, Comparison circuit, USB Download circuit and AVR single chip microcomputer circuit）</h4>
<figure data-type="image" tabindex="1"><img src="https://upload-images.jianshu.io/upload_images/24469819-2ad821d0658617a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Power supply circuit" loading="lazy"></figure>
<h4 id="the-comparison-circuit-is-the-most-interesting-part-i-think-compare-the-usb-power-supply-with-dc-power-supply-through-lm358-and-select-the-power-side">The comparison circuit is the most interesting part I think. Compare the USB power supply with DC power supply through lm358, and select the power side.</h4>
<figure data-type="image" tabindex="2"><img src="https://upload-images.jianshu.io/upload_images/24469819-8289c402bed3c3eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Comparison circuit" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://upload-images.jianshu.io/upload_images/24469819-d1caea0a3c97e8a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="USB Download circuit" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://upload-images.jianshu.io/upload_images/24469819-6400ed3b9f7c8d26.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AVR single chip microcomputer circuit" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://upload-images.jianshu.io/upload_images/24469819-1b335e7dd8b31689.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="The final drawn effect" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://upload-images.jianshu.io/upload_images/24469819-edba84428d98ecac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="After welding, download the program to test the effect" loading="lazy"></figure>
<figure data-type="image" tabindex="7"><img src="https://upload-images.jianshu.io/upload_images/24469819-d7a0db049d1442a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Serial port observation results in arduinoIDE" loading="lazy"></figure>
<p>Because there happened to be a DHT11 temperature and humidity sensor nearby, I decided to write a small code to test it.</p>
<pre><code>#include &lt;dht11.h&gt;//Temperature and humidity head file. You have to download this head file

#define DHT11PIN 2 //D2 is defined as the data output port
dht11 DHT11;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);//Define baud rate

   pinMode(DHT11PIN,OUTPUT); //Set D2 as data output
 
}

void loop() {
  // put your main code here, to run repeatedly:
  temp = analogRead(Aout); //Read analog data of A0 pin
  
  String a=String(temp);
  int chk = DHT11.read(DHT11PIN);                 //Assign the read value to chk
int tem=(float)DHT11.temperature;               //Assign the temperature value to tem
int hum=(float)DHT11.humidity;                   //Assign humidity value to hum
Serial.print(&quot;Tempeature:&quot;);                        //Print out the Temperature:
Serial.print(tem);                                     //Print temperature results
Serial.println(&quot;°c&quot;); 
Serial.print(&quot;Humidity:&quot;);                            //Print out Humidity:
Serial.print(hum);                                     //Print out humidity results
Serial.println(&quot;%&quot;);                                  //Print out%
Serial.println(&quot;&quot;); 

  delay(500);  //500 ms delay

}
</code></pre>
<p>###Difficulties encountered</p>
<ol>
<li>Ams1117-5.0v will reduce the voltage, and dc005 will be less than 5V when powered by the wrong adapter(I measured it myself with a multimeter)It is better to use a 7-12V power adapter.<br>
2.Ams1117-5.0v chip can be removed if you use dc002, or when power adapter is 5V, the chip can also be removed.</li>
<li>When drawing the schematic diagram library and package diagram library, the schematic pin must correspond to the component pin in the package diagram library. On this basis, it should correspond to the package pin of the actual component.（If you don't do this, the wiring of the designed circuit will go wrong）</li>
</ol>
<p>#<a href="https://gitee.com/riddler11/ad_draws_arduino.git">The most important file download address, click here to gitee download</a></p>
]]></content>
    </entry>
</feed>